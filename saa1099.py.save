from RPi import GPIO
from time import sleep

DO_CLK = False
#CLK_HZ = 8000000
CLK_HZ = 4000

PIN_a0 = 2
PIN_CS = 3
PIN_CLK = 4
PIN_WR = 14
PIN_d0 = 1
PIN_d1 = 7
PIN_d2 = 8
PIN_d3 = 25
PIN_d4 = 24
PIN_d5 = 23
PIN_d6 = 18
PIN_d7 = 15

def wait(ns):
    sleep(ns/1e9*1000)
#    if DO_CLK:
#        clk()

def init():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(PIN_a0, GPIO.OUT)
    GPIO.setup(PIN_CS, GPIO.OUT, initial=GPIO.HIGH)
    GPIO.setup(PIN_WR, GPIO.OUT, initial=GPIO.HIGH)
    GPIO.setup(PIN_d0, GPIO.OUT)
    GPIO.setup(PIN_d1, GPIO.OUT)
    GPIO.setup(PIN_d2, GPIO.OUT)
    GPIO.setup(PIN_d3, GPIO.OUT)
    GPIO.setup(PIN_d4, GPIO.OUT)
    GPIO.setup(PIN_d5, GPIO.OUT)
    GPIO.setup(PIN_d6, GPIO.OUT)
    GPIO.setup(PIN_d7, GPIO.OUT)
    if DO_CLK:
        GPIO.setup(PIN_CLK, GPIO.OUT, initial=GPIO.LOW)


def set_reg(reg):
    '''Set the SAA1099 register'''
    write_a0(True)
    # t_ASC (time from A0 to CS low) is zero ns
    # data must be valid at least 100 ns before WR is de-asserted
    # so we might as well do this as early as possible
    _set_data(reg)
    _set_CS(True) # active low, the _set_CS flips the sign for you
   # CS low to WR fall must be min 30 ns
   # A0 setup to WR fall must be min 50 ns
    wait(50)

    _set_WR(True) # active low, the _set_WR flips the sign for you

    # WR must be low for at least 100 ns
    wait(100)

    # deassert WR
    _set_WR(False)
    # minimum CS hold time after WR deasserted is 0 ns
    _set_CS(False)

    # A0 hold time and data bus hold time after WR deasserted
    # is min 0 ns, so we're done here


def set_value(value):
    '''Send a value to SAA1099'''
    # see comments as for set_reg except a0 is False
    write_a0(False)
    _set_data(value)
    _set_CS(True)
    wait(50)
    _set_WR(True)
    wait(100)
    _set_WR(False)
    _set_CS(False)


def write_a0(b):
    '''A0 active high'''
    GPIO.output(PIN_a0, b)


def _set_CS(b):
    '''CS active low'''
    GPIO.output(PIN_CS, not b)


def _set_WR(b):
    '''WR active low'''
    GPIO.output(PIN_WR, not b)


def _set_data(d):
    GPIO.output((PIN_d0, PIN_d1, PIN_d2, PIN_d3, PIN_d4, PIN_d5, PIN_d6, PIN_d7),
                bits(d))


def bits(d):
    return [d&(2**i)>0 for i in range(0,8)]


def sound(reg,val):
    set_reg(reg)
    set_value(val)


def reset_sound():
    sound(28,0)
    for i in range(0,29):
        sound(i,0)


def clk():
    if DO_CLK:
        GPIO.output(PIN_CLK, True)
        sleep(0.5/CLK_HZ)
        GPIO.output(PIN_CLK, False)
        sleep(0.5/CLK_HZ)


if __name__=='__main__':
    import signal
    import sys
    import random

    global clean_shutdown
    clean_shutdown = False

#    def signal_handler(sig, frame):
#        global clean_shutdown
#        if not clean_shutdown:
#            reset_sound()
#            GPIO.cleanup()
#            clean_shutdown = True
#        sys.exit(0)
#
#    signal.signal(signal.SIGINT, signal_handler)

    try:
        init()
        reset_sound()
        sound(28,0)
        sound(28,2)
#        sound(0,2*16)
#        sound(2,10)
        sound(0,255)
#       sound(1,255)
#       sound(2,255)
#        sound(3,15)
#        sound(20,31)
#        sound(20,31)
        sound(21,31)

        sound(8,0)
        sound(9,128)
        sound(10,64)
        sound(16,3+3*16)
        sound(17,3)
	#        sound(24,14+128+32)
#        sound(24,14+128)
#       sound(24,2+128+32)
#        set_reg(24)
#        sound(24,130)
        sound(28,1)

        while(True):
#            sleep(0.1)
            clk()

        input('Press any key...')
#        sound(24,6+128+32)

        i = 0
        while(True):
            sound(2,255)
            input('Press any key...')
            sound(2,0)
            input('Press any key...')
#            sound(24,130)
#            input('Press any key...')

#            sound(24,0)
#            sleep(0.0223)
#            sleep(0.2)
#            sound(24,2+128+32)
#            sound(28,3)
#            sound(28,1)
#            sound(24,6+128+32)
#            sound(28,1)
#            set_reg(24)
#            sound(28,3)
#            sound(28,1)
#            input('Press any key...')

        while(True):
            for i in range(0,16):
                set_reg(24)
                input('Press any key...')
                sleep(0.1)

        while(True):
            sleep(0.5)
            sound(16, random.randint(0,7))
            sound(8, random.randint(0,255))

    finally:
        reset_sound()
        GPIO.cleanup()
        clean_shutdown = True
